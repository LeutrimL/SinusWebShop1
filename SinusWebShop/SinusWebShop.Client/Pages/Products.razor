@page "/products"
@using SinusWebShop.Client.Models
@using SinusWebShop.Client.Services
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@attribute [StreamRendering]
@rendermode InteractiveServer

<h3>Produkter</h3>

<p>
    Typfilter: <input @bind="typeFilter" type="text" />
    Minsta pris: <input @bind="minPriceFilter" type="number" step="0.01" />
    Högsta pris: <input @bind="maxPriceFilter" type="number" step="0.01" />
    <button @onclick="ApplyFilters">Tillämpa filter</button>
</p>

@if (filteredProducts == null)
{
    <p><em>Laddar...</em></p>
}
else
{
    <table class='table'>
        <thead>
            <tr>
                <th>Kategori</th>
                <th>Titel</th>
                <th>Beskrivning</th>
                <th>Pris</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in filteredProducts)
            {
                <tr>
                    <td>@product.Category</td>
                    <td>@product.Title</td>
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string typeFilter;
    private decimal minPriceFilter;
    private decimal maxPriceFilter;
    private List<Product> filteredProducts;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        filteredProducts = await ProductService.GetProductsAsync();
    }

    private void ApplyFilters()
    {
        filteredProducts = filteredProducts
            .Where(p => p.Category.Contains(typeFilter) && p.Price >= minPriceFilter && p.Price <= maxPriceFilter)
            .ToList();
    }
}
